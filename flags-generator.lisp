(in-package :magicffi)

(defun generate-flags (out in)
  "Internal for the author to generate the grovel file. Params are
output stream and input stream."
  (flet ((%get-lines ()
           (flet ((extract-doc (cmt)
                    (let* ((regex "/\\*(.*)\\*/")
                           (regs (nth-value 1 (ppcre:scan-to-strings regex cmt))))
                      (string-trim " " (aref regs 0)))))
             (loop :for line := (read-line in nil)
                   :while line
                   :when (and (ppcre:scan "#define" line)
                              (not (ppcre:scan "_MAGIC_H" line)))
                   :collect (let* ((list (ppcre:split "\\s+" line :limit 4))
                                   (name (second list))
                                   (cmt (fourth list))
                                   (doc (and cmt (extract-doc cmt))))
                              (list name doc)))))
         (%const-name (name)
           (format nil "+~A+" (substitute #\- #\_ name)))
         (%bit-name (name)
           (format nil ":~A" (subseq (substitute #\- #\_ name) 6)))
         (%name (line) (first line))
         (%doc (line) (second line)))
    (let* ((lines (%get-lines)))
      (format out ";;;; Put the following two forms into the grovel file.~%~%")
      (format out "~&(progn")
      (dolist (line lines)
        (let* ((name (%name line))
               (symbol-name (%const-name name)))
          (format out "~&  (constant (~A ~S)" symbol-name name)
          (format out "~&    :documentation ~S)" (%doc line))))
      (format out ")~2%")
      (format out "~&(bitfield magic-flags")
      (dolist (line lines)
        (let* ((name (%name line))
               (symbol-name (%bit-name name)))
          (format out "~&  ((~A ~S)" symbol-name name)
          (format out "~&   :documentation ~S)" (%doc line))))
      (format out ")~2%"))))
