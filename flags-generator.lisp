(in-package :magicffi)

(defun generate-flags (out in)
  "Internal for the author to generate the grovel file. Params are
output stream and input stream."
  (labels ((%read-rest ()
             (loop :for line := (read-line in nil)
                   :while line
                   :collect (cl-ppcre:regex-replace "\\s+\\*\\s*" line "")
                   :until (cl-ppcre:scan ".*\\*/" line)))
           (%read-line ()
             (let ((line (read-line in nil)))
               (cond ((not line) nil)
                     ((not (cl-ppcre:scan "#define" line)) :skip)
                     ((cl-ppcre:scan "_MAGIC_H" line) :skip)
                     ((cl-ppcre:scan "/\\*.*\\*/" line) line)
                     ((cl-ppcre:scan "/\\*.*" line)
                      ;; join lines
                      (format nil "~a~{ ~a~}" line (%read-rest)))
                     (t line))))
           (%scan-to-strings (regex string)
             (nth-value 1 (cl-ppcre:scan-to-strings regex string)))
           (%extract-doc (cmt)
             (let* ((regex "/\\*\\s*(.*\\S)\\s*\\*/")
                    (regs (%scan-to-strings regex cmt)))
               (and regs (aref regs 0))))
           (%get-lines ()
             (loop :for line := (%read-line)
                   :while line
                   :unless (eql line :skip)
                     :collect (let* ((regs (%scan-to-strings "^\\s*#define\\s+(\\S+)\\s(.*)$" line))
                                     (name (aref regs 0))
                                     (cmt (aref regs 1))
                                     (doc (and cmt (%extract-doc cmt))))
                                (list name doc))))
           (%const-name (name)
             (format nil "+~A+" (substitute #\- #\_ name)))
           (%bit-name (name)
             (format nil ":~A" (subseq (substitute #\- #\_ name) 6)))
           (%name (line) (first line))
           (%doc (line) (second line)))
    (let* ((lines (%get-lines)))
      (format out ";;;; Put the following two forms into the grovel file.~%~%")
      (format out "~&(progn")
      (dolist (line lines)
        (let* ((name (%name line))
               (symbol-name (%const-name name)))
          (format out "~&  (constant (~A ~S)" symbol-name name)
          (format out "~&    :documentation ~S)" (%doc line))))
      (format out ")~2%")
      (format out "~&(bitfield magic-flags")
      (dolist (line lines)
        (let* ((name (%name line))
               (symbol-name (%bit-name name)))
          (format out "~&  ((~A ~S)" symbol-name name)
          (format out "~&   :documentation ~S)" (%doc line))))
      (format out ")~2%"))))
